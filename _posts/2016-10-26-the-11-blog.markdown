---
layout: post
title:  "深入PHP中的引用 "
date:   2015-10-26 16:41:03 +0800
categories: jekyll update
---

<div id="article_content" class="article_content">

<p>虽然常说做C/C++编程的程序员转做<a href="http://lib.csdn.net/base/36" class="replace_word" title="PHP知识库" target="_blank" style="color:#df3434; font-weight:bold;">PHP</a>编程很快可以上手，但是对于PHP中的引用和C++的差别比较大，这种差别更多是由于C++和PHP的变量存储结构不同造成的，本文试图详解一下PHP中的引用，对C++中的引用只是作对比时提及，如果要了解C++的引用请参考《C++ Primer》一书。理解本文最好先看一下笔者<a target="_blank" href="http://blog.csdn.net/wenzhou1219/article/details/16832067">PHP变量存储结构的博文</a>和<a target="_blank" href="http://blog.csdn.net/wenzhou1219/article/details/16850737">变量赋值行为的博文</a>，本文说明PHP引用特别是<span style="color:#ff0000">对象引用和函数返回引用</span>容易被错误使用和错误理解的地方。</p>
<p></p>
<h3><a name="t0"></a><span style="font-size:14px"><strong>1.简单变量引用</strong></span></h3>
<p>对于PHP中的引用，我们先从基本的变量谈起，用之前的程序说话，运行如下PHP程序</p>
<p></p>
<div class="dp-highlighter bg_php"><div class="bar"><div class="tools"><b>[php]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 476px; top: 706px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_1" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_1" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=1&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1" class="dp-c"><li class="alt"><span><span>&lt;?php&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$a</span><span>&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$b</span><span>&nbsp;=&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$b</span><span>&nbsp;=&nbsp;2;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="vars">$c</span><span>&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$d</span><span>&nbsp;=&nbsp;&amp;</span><span class="vars">$c</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$c='</span><span>.</span><span class="vars">$c</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$d='</span><span>.</span><span class="vars">$d</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$d</span><span>&nbsp;=&nbsp;2;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$c='</span><span>.</span><span class="vars">$c</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$d='</span><span>.</span><span class="vars">$d</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>?&gt;&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249" style="display: none;"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_1_1773072" name="code" class="php" style="display: none;">&lt;?php
$a = 1;
$b = $a;
echo '$a='.$a."\t".'$b='.$b."\n";
$b = 2;
echo '$a='.$a."\t".'$b='.$b."\n";

$c = 1;
$d = &amp;$c;
echo '$c='.$c."\t".'$d='.$d."\n";
$d = 2;
echo '$c='.$c."\t".'$d='.$d."\n";
?&gt;</pre>这里采用命令行演示，结果如下
<p></p>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 482px; top: 1032px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_2" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_2" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=2&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1"><li class="alt"><span><span>$a=1&nbsp;$b=1&nbsp;&nbsp;</span></span></li><li class=""><span>$a=1&nbsp;$b=2&nbsp;&nbsp;</span></li><li class="alt"><span>$c=1&nbsp;$d=1&nbsp;&nbsp;</span></li><li class=""><span>$c=2&nbsp;$d=2&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249" style="display: none;"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_2_5819253" name="code" class="plain" style="display: none;">$a=1 $b=1
$a=1 $b=2
$c=1 $d=1
$c=2 $d=2</pre>
<p></p>
<p>可以看到：</p>
<p>开始定义$a时初始化为1,定义$b时初始化为$a的值，这时候两个值均为1，下面改变$b的值为2，再次输出，可以看到$b的值发生变化为2而$a的值仍然为1，这时候$a，$b的值不一样；然后，开始定义$c时初始化为1,定义$d时初始化为$c的引用，这时候两个值均为1，下面改变$d的值为2，再次输出，可以看到$d的值发生变化为2而$c的值也为2，这时候$c，$d的值一样</p>
<p>这两个例子的唯一不同在于定义$d时加上了一个引用定义符&amp;。</p>
<p><span style="font-family:Arial,Verdana">这里我们用一张图来说明</span></p>
<p><span style="font-family:Arial,Verdana"><img src="http://img.blog.csdn.net/20131122132839265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VuemhvdTEyMTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>
</span></p>
<p><span style="font-family:Arial,Verdana"></span></p>
<p style="font-family:Arial,Verdana">最开始将$a=1时,$a变量指向内存结构1，$a(内存结构1)的引用计数refcount为1，传值方式赋值给$b后，$a（内存结构1）的引用计数refcount+1为2，由于不是引用故is_ref值为0，$a、$b指向同一内存结构，故此时$b的引用计数refcount也为2而is_ref为0，当$b赋值为2时，检查是否为引用is_ref为0且引用计数refcount&gt;1故新建一个内存结构2其值为2，$b指向这个内存结构，$b的的引用计数refcount为1而is_ref为0，$a的引用计数refcount-1为1而is_ref为0；最开始将$c=1时,$c变量指向内存结构1，$c(内存结构1)的引用计数refcount为1，引用方式赋值为$d后，<span style="font-family:Arial,Verdana">由于是引用故is_ref值为1，</span>$c（内存结构1）的引用计数refcount设为0，$c、$d指向同一内存结构，故此时$d的引用计数refcount也为0而is_ref为1，当$d赋值为2时，检查是否为引用is_ref为1，不会新建一个内存结构，只是将原来$a指向的内存结构的值改为2，其他不变。</p>
<h3><a name="t1"></a><span style="font-family:Arial,Verdana"><span style="font-size:14px"><strong>2.对象引用</strong></span></span></h3>
<p><span style="color:#ff0000">PHP的对象引用是人们最容易错误理解的地方</span>，由于PHP赋值的"Copy on Write"原则，将一个对象赋值给另外一个对象后两者指向同一个内存地址，这时候去操纵其中一个对象的成员变量实际上就是操作另外一个对象的成员变量，这样由于PHP存储和赋值行为决定的表现和C++中的引用即别名表现是一样的，人们看到赋值后对象这样的表现就说PHP中对象赋值默认传的是引用，显然按照PHP中的引用概念来说，这样的理解完全是错误的，测试代码如下</p>
<p></p>
<div class="dp-highlighter bg_php"><div class="bar"><div class="tools"><b>[php]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 476px; top: 2003px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_3" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_3" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=3&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1" class="dp-c"><li class="alt"><span><span>&lt;?php&nbsp;&nbsp;</span></span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;class1&nbsp;&nbsp;</span></span></li><li class="alt"><span>{&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">function</span><span>&nbsp;__construct()&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$this</span><span>-&gt;a&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=""><span>}&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">class</span><span>&nbsp;class2&nbsp;&nbsp;</span></span></li><li class="alt"><span>{&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">function</span><span>&nbsp;__construct()&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$this</span><span>-&gt;a&nbsp;=&nbsp;2;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=""><span>}&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="vars">$object1</span><span>&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;class1;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$object2</span><span>&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;class2;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="vars">$a</span><span>&nbsp;=&nbsp;</span><span class="vars">$object1</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>&nbsp;=&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b-&gt;a='</span><span>.</span><span class="vars">$b</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$b属于类'</span><span>.get_class(</span><span class="vars">$b</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>-&gt;a&nbsp;=&nbsp;3;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b-&gt;a='</span><span>.</span><span class="vars">$b</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$b属于类'</span><span>.get_class(</span><span class="vars">$b</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>&nbsp;=&nbsp;</span><span class="vars">$object2</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b-&gt;a='</span><span>.</span><span class="vars">$b</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$b属于类'</span><span>.get_class(</span><span class="vars">$b</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$c</span><span>&nbsp;=&nbsp;</span><span class="vars">$object1</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$d</span><span>&nbsp;=&nbsp;&amp;</span><span class="vars">$c</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$c-&gt;a='</span><span>.</span><span class="vars">$c</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$d-&gt;a='</span><span>.</span><span class="vars">$d</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$c属于类'</span><span>.get_class(</span><span class="vars">$c</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$d属于类'</span><span>.get_class(</span><span class="vars">$d</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$d</span><span>-&gt;a&nbsp;=&nbsp;4;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$c-&gt;a='</span><span>.</span><span class="vars">$c</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$d-&gt;a='</span><span>.</span><span class="vars">$d</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$c属于类'</span><span>.get_class(</span><span class="vars">$c</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$d属于类'</span><span>.get_class(</span><span class="vars">$d</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$d</span><span>&nbsp;=&nbsp;</span><span class="vars">$object2</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$c-&gt;a='</span><span>.</span><span class="vars">$c</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$d-&gt;a='</span><span>.</span><span class="vars">$d</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$c属于类'</span><span>.get_class(</span><span class="vars">$c</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$d属于类'</span><span>.get_class(</span><span class="vars">$d</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>?&gt;&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249" style="display: none;"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_3_2372907" name="code" class="php" style="display: none;">&lt;?php
class class1
{
	public $a;
	
	function __construct()
	{
		$this-&gt;a = 1;
	}
}

class class2
{
	public $a;
	
	function __construct()
	{
		$this-&gt;a = 2;
	}
}

$object1 = new class1;
$object2 = new class2;

$a = $object1;
$b = $a;
echo '$a-&gt;a='.$a-&gt;a."\t".'$b-&gt;a='.$b-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$b属于类'.get_class($b)."\n";
$b-&gt;a = 3;
echo '$a-&gt;a='.$a-&gt;a."\t".'$b-&gt;a='.$b-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$b属于类'.get_class($b)."\n";
$b = $object2;
echo '$a-&gt;a='.$a-&gt;a."\t".'$b-&gt;a='.$b-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$b属于类'.get_class($b)."\n";
echo "\n";
$c = $object1;
$d = &amp;$c;
echo '$c-&gt;a='.$c-&gt;a."\t".'$d-&gt;a='.$d-&gt;a."\t".'$c属于类'.get_class($c)."\t".'$d属于类'.get_class($d)."\n";
$d-&gt;a = 4;
echo '$c-&gt;a='.$c-&gt;a."\t".'$d-&gt;a='.$d-&gt;a."\t".'$c属于类'.get_class($c)."\t".'$d属于类'.get_class($d)."\n";
$d = $object2;
echo '$c-&gt;a='.$c-&gt;a."\t".'$d-&gt;a='.$d-&gt;a."\t".'$c属于类'.get_class($c)."\t".'$d属于类'.get_class($d)."\n";
?&gt;</pre>
<p></p>
<p>执行结果如下</p>
<p></p>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 482px; top: 2814px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_4" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_4" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=4&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1"><li class="alt"><span><span>$a-&gt;a=1&nbsp;$b-&gt;a=1&nbsp;$a属于类class1&nbsp;&nbsp;$b属于类class1&nbsp;&nbsp;</span></span></li><li class=""><span>$a-&gt;a=3&nbsp;$b-&gt;a=3&nbsp;$a属于类class1&nbsp;&nbsp;$b属于类class1&nbsp;&nbsp;</span></li><li class="alt"><span>$a-&gt;a=3&nbsp;$b-&gt;a=2&nbsp;$a属于类class1&nbsp;&nbsp;$b属于类class2&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span>$c-&gt;a=3&nbsp;$d-&gt;a=3&nbsp;$c属于类class1&nbsp;&nbsp;$d属于类class1&nbsp;&nbsp;</span></li><li class="alt"><span>$c-&gt;a=4&nbsp;$d-&gt;a=4&nbsp;$c属于类class1&nbsp;&nbsp;$d属于类class1&nbsp;&nbsp;</span></li><li class=""><span>$c-&gt;a=2&nbsp;$d-&gt;a=2&nbsp;$c属于类class2&nbsp;&nbsp;$d属于类class2&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249" style="display: none;"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_4_6659068" name="code" class="plain" style="display: none;">$a-&gt;a=1 $b-&gt;a=1 $a属于类class1  $b属于类class1
$a-&gt;a=3 $b-&gt;a=3 $a属于类class1  $b属于类class1
$a-&gt;a=3 $b-&gt;a=2 $a属于类class1  $b属于类class2


$c-&gt;a=3 $d-&gt;a=3 $c属于类class1  $d属于类class1
$c-&gt;a=4 $d-&gt;a=4 $c属于类class1  $d属于类class1
$c-&gt;a=2 $d-&gt;a=2 $c属于类class2  $d属于类class2</pre>
<p></p>
<p><span style="font-family:Arial,Verdana">可以看到，$b=$a赋值后改变$b-&gt;a的值$a-&gt;a也发生了变化，人们一般这时候就认为PHP对象赋值传的是引用，但是我们在<span style="color:#ff0000">PHP中的引用意思是对变量赋值后其关联的引用对象也发生变化</span>，所以，$b=$object2发现$a没有改变，显然这时候并不是引用；$d=&amp;$c才是真正的引用，$d=$object2后$a也发生改变等于$object2。</span></p>
<p><span style="font-family:Arial,Verdana">我们引用<a target="_blank" href="http://www.php.net/manual/zh/language.oop5.references.php">PHP官网上的一段话:</a></span></p>
<p class="para" style="margin-top:0.75em; margin-bottom:0.75em"><span style="color:#ff0000">“在php5 的对象编程经常提到的一个关键点是“默认情况下对象是通过引用传递的”。但其实这不是完全正确的。下面通过一些例子来说明。</span></p>
<p class="para" style="margin-top:0.75em; margin-bottom:0.75em"><span style="color:#ff0000">php的引用是别名，就是两个不同的变量名字指向相同的内容。在php5，一个对象变量已经不再保存整个对象的值。只是保存一个标识符来访问真正的对象内容。 当对象作为参数传递，作为结果返回，或者赋值给另外一个变量，另外一个变量跟原来的不是引用的关系，只是他们都保存着同一个标识符的拷贝，这个标识符指向同一个对象的真正内容。”</span></p>
<p class="para" style="margin-top:0.75em; margin-bottom:0.75em">所以说，<span style="color:#ff0000">其实对象赋值行为和普通变量是一样的，两者的引用表现也是完全一样的。但是一般来说我们更多使用的是对象直接赋值，这样改变其中一个对象属性另一个对象属性也会发生变化，表现的像C++中的引用一样，这样就够了。</span></p>
<span style="font-family:Arial,Verdana"></span>
<p></p>
<h3><a name="t2"></a><span style="font-family:Arial,Verdana"><span style="font-family:Arial,Verdana"><span style="font-size:14px"><strong>3.函数参数传递</strong></span></span></span></h3>
<span style="font-family:Arial,Verdana"><span style="font-size:12px; font-family:Arial,Verdana">对于函数参数传递，有了前面对变量和对象的理解讲解，这里只给出测试代码，请自行分析，不懂请留言</span></span>
<p></p>
<p><span style="font-family:Arial,Verdana"><span style="font-size:12px; font-family:Arial,Verdana"></span></span></p>
<div class="dp-highlighter bg_php"><div class="bar"><div class="tools"><b>[php]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 476px; top: 3378px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_5" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_5" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=5&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1" class="dp-c"><li class="alt"><span><span>&lt;?php&nbsp;&nbsp;</span></span></li><li class=""><span><span class="comment">//测试变量传递</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">function</span><span>&nbsp;changeByValue(</span><span class="vars">$a</span><span>)&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$a</span><span>&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class=""><span>}&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="keyword">function</span><span>&nbsp;changeByRef(&amp;</span><span class="vars">$a</span><span>)&nbsp;&nbsp;</span></span></li><li class="alt"><span>{&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$a</span><span>&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="vars">$a</span><span>&nbsp;=&nbsp;2;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a&nbsp;before&nbsp;pass&nbsp;to&nbsp;changeByValue='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>changeByValue(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a&nbsp;after&nbsp;pass&nbsp;to&nbsp;changeByValue='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$a</span><span>&nbsp;=&nbsp;2;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a&nbsp;before&nbsp;pass&nbsp;to&nbsp;changeByRef='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>changeByRef(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a&nbsp;after&nbsp;pass&nbsp;to&nbsp;changeByRef='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="comment">//测试对象传递</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;class1&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">function</span><span>&nbsp;__construct()&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$this</span><span>-&gt;a&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">class</span><span>&nbsp;class2&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">function</span><span>&nbsp;__construct()&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$this</span><span>-&gt;a&nbsp;=&nbsp;2;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">function</span><span>&nbsp;changeByValueClass(class1&nbsp;</span><span class="vars">$a</span><span>)&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$a</span><span>-&gt;a&nbsp;=&nbsp;3;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">global</span><span>&nbsp;</span><span class="vars">$object1</span><span>,</span><span class="vars">$object2</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'此时还没有对对象重新赋值，只是操作对象属性'</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$object1-&gt;a='</span><span>.</span><span class="vars">$object1</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$obejct1属于类'</span><span>.get_class(</span><span class="vars">$object1</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'此时对对象重新赋值'</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$a</span><span>&nbsp;=&nbsp;</span><span class="vars">$object2</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$object1-&gt;a='</span><span>.</span><span class="vars">$object1</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$obejct1属于类'</span><span>.get_class(</span><span class="vars">$object1</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="keyword">function</span><span>&nbsp;changeByRefClass(class1&nbsp;&amp;</span><span class="vars">$a</span><span>)&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$a</span><span>-&gt;a&nbsp;=&nbsp;4;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">global</span><span>&nbsp;</span><span class="vars">$object1</span><span>,</span><span class="vars">$object2</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'此时还没有对对象重新赋值，只是操作对象属性'</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$object1-&gt;a='</span><span>.</span><span class="vars">$object1</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$obejct1属于类'</span><span>.get_class(</span><span class="vars">$object1</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'此时对对象重新赋值'</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="vars">$a</span><span>&nbsp;=&nbsp;</span><span class="vars">$object2</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="func">echo</span><span>&nbsp;</span><span class="string">'$a-&gt;a='</span><span>.</span><span class="vars">$a</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$object1-&gt;a='</span><span>.</span><span class="vars">$object1</span><span>-&gt;a.</span><span class="string">"\t"</span><span>.</span><span class="string">'$a属于类'</span><span>.get_class(</span><span class="vars">$a</span><span>).</span><span class="string">"\t"</span><span>.</span><span class="string">'$obejct1属于类'</span><span>.get_class(</span><span class="vars">$object1</span><span>).</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="vars">$object1</span><span>&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;class1;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$object2</span><span>&nbsp;=&nbsp;</span><span class="keyword">new</span><span>&nbsp;class2;&nbsp;&nbsp;</span></span></li><li class="alt"><span>changeByValueClass(<span class="vars">$object1</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span>changeByRefClass(<span class="vars">$object1</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span>?&gt;&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249" style="display: none;"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_5_3943853" name="code" class="php" style="display: none;">&lt;?php
//测试变量传递
function changeByValue($a)
{
	$a = 1;
}

function changeByRef(&amp;$a)
{
	$a = 1;
}

$a = 2;
echo '$a before pass to changeByValue='.$a."\n";
changeByValue($a);
echo '$a after pass to changeByValue='.$a."\n";
$a = 2;
echo '$a before pass to changeByRef='.$a."\n";
changeByRef($a);
echo '$a after pass to changeByRef='.$a."\n";

//测试对象传递
class class1
{
	public $a;
	
	function __construct()
	{
		$this-&gt;a = 1;
	}
}

class class2
{
	public $a;
	
	function __construct()
	{
		$this-&gt;a = 2;
	}
}

function changeByValueClass(class1 $a)
{
	$a-&gt;a = 3;
	
	global $object1,$object2;
	echo '此时还没有对对象重新赋值，只是操作对象属性'."\n";
	echo '$a-&gt;a='.$a-&gt;a."\t".'$object1-&gt;a='.$object1-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$obejct1属于类'.get_class($object1)."\n";
	echo '此时对对象重新赋值'."\n";
	$a = $object2;
	echo '$a-&gt;a='.$a-&gt;a."\t".'$object1-&gt;a='.$object1-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$obejct1属于类'.get_class($object1)."\n";
}

function changeByRefClass(class1 &amp;$a)
{
	$a-&gt;a = 4;
	
	global $object1,$object2;
	echo '此时还没有对对象重新赋值，只是操作对象属性'."\n";
	echo '$a-&gt;a='.$a-&gt;a."\t".'$object1-&gt;a='.$object1-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$obejct1属于类'.get_class($object1)."\n";
	echo '此时对对象重新赋值'."\n";
	$a = $object2;
	echo '$a-&gt;a='.$a-&gt;a."\t".'$object1-&gt;a='.$object1-&gt;a."\t".'$a属于类'.get_class($a)."\t".'$obejct1属于类'.get_class($object1)."\n";
}

$object1 = new class1;
$object2 = new class2;
changeByValueClass($object1);
changeByRefClass($object1);
?&gt;</pre>
<p></p>
<p><span style="font-family:Arial,Verdana">执行结果如下</span></p>
<p><span style="font-family:Arial,Verdana"></span></p>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 482px; top: 4748px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_6" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_6" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=6&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1"><li class="alt"><span><span>$a&nbsp;before&nbsp;pass&nbsp;to&nbsp;changeByValue=2&nbsp;&nbsp;</span></span></li><li class=""><span>$a&nbsp;after&nbsp;pass&nbsp;to&nbsp;changeByValue=2&nbsp;&nbsp;</span></li><li class="alt"><span>$a&nbsp;before&nbsp;pass&nbsp;to&nbsp;changeByRef=2&nbsp;&nbsp;</span></li><li class=""><span>$a&nbsp;after&nbsp;pass&nbsp;to&nbsp;changeByRef=1&nbsp;&nbsp;</span></li><li class="alt"><span>此时还没有对对象重新赋值，只是操作对象属性&nbsp;&nbsp;</span></li><li class=""><span>$a-&gt;a=3&nbsp;$object1-&gt;a=3&nbsp;&nbsp;&nbsp;$a属于类class1&nbsp;&nbsp;$obejct1属于类class1&nbsp;&nbsp;</span></li><li class="alt"><span>此时对对象重新赋值&nbsp;&nbsp;</span></li><li class=""><span>$a-&gt;a=2&nbsp;$object1-&gt;a=3&nbsp;&nbsp;&nbsp;$a属于类class2&nbsp;&nbsp;$obejct1属于类class1&nbsp;&nbsp;</span></li><li class="alt"><span>此时还没有对对象重新赋值，只是操作对象属性&nbsp;&nbsp;</span></li><li class=""><span>$a-&gt;a=4&nbsp;$object1-&gt;a=4&nbsp;&nbsp;&nbsp;$a属于类class1&nbsp;&nbsp;$obejct1属于类class1&nbsp;&nbsp;</span></li><li class="alt"><span>此时对对象重新赋值&nbsp;&nbsp;</span></li><li class=""><span>$a-&gt;a=2&nbsp;$object1-&gt;a=2&nbsp;&nbsp;&nbsp;$a属于类class2&nbsp;&nbsp;$obejct1属于类class2&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_6_2133709" name="code" class="plain" style="display: none;">$a before pass to changeByValue=2
$a after pass to changeByValue=2
$a before pass to changeByRef=2
$a after pass to changeByRef=1
此时还没有对对象重新赋值，只是操作对象属性
$a-&gt;a=3 $object1-&gt;a=3   $a属于类class1  $obejct1属于类class1
此时对对象重新赋值
$a-&gt;a=2 $object1-&gt;a=3   $a属于类class2  $obejct1属于类class1
此时还没有对对象重新赋值，只是操作对象属性
$a-&gt;a=4 $object1-&gt;a=4   $a属于类class1  $obejct1属于类class1
此时对对象重新赋值
$a-&gt;a=2 $object1-&gt;a=2   $a属于类class2  $obejct1属于类class2</pre>
<p></p>
<p><span style="font-family:Arial,Verdana">简单说明一下，当传入简单变量时必须明确指明是传值方式还是传引用方式调用参数，如果要求在函数中形参的重新赋值影响到实参就需要引用方式传值，反之就直接传值就行，特别提一下，<span style="color:#ff0000">一般对象传值就行了因为一般要求改变也只是对对象成员属性进行改变很少需要改变对象赋值</span>。</span></p>
<h3><a name="t3"></a><span style="font-family:Arial,Verdana"><span style="font-family:Arial,Verdana"><span style="font-size:14px"><strong>4.函数返回引用</strong></span></span></span></h3>
<p style="font-family:Arial,Verdana">PHP的函数返回引用也是很多人有疑惑的地方，PHP的函数返回引用<span style="color:#ff0000">不仅在函数定义的时候要说明返回的是引用，在调用的时候也要说明以引用的方式调用，缺一不可</span>。这里以函数返回值为简单变量的情况来测试代码，前面已经说过了对象和普通变量引用没什么差别，不过和函数参数调用一样，一般情况下也不需要返回对象引用。</p>
<p style="font-family:Arial,Verdana"></p>
<div class="dp-highlighter bg_php"><div class="bar"><div class="tools"><b>[php]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 476px; top: 5186px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_7" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_7" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=7&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1" class="dp-c"><li class="alt"><span><span>&lt;?php&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$a</span><span>&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">function</span><span>&nbsp;returnValue()&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">global</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">"函数返回值，值方式调用函数\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>&nbsp;=&nbsp;returnValue();&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>=2;&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">"函数返回值，引用方式调用函数\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$b</span><span>&nbsp;=&nbsp;&amp;returnValue();&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$b</span><span>=2;&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;</span></li><li class=""><span><span class="vars">$a</span><span>&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="keyword">function</span><span>&nbsp;&amp;returnRef()&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">global</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="vars">$a</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;</span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">"函数返回引用，值方式调用函数\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>&nbsp;=&nbsp;returnRef();&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="vars">$b</span><span>=2;&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">"函数返回引用，引用方式调用函数\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$b</span><span>&nbsp;=&nbsp;&amp;returnRef();&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="vars">$b</span><span>=2;&nbsp;&nbsp;</span></span></li><li class=""><span>debug_zval_dump(<span class="vars">$a</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span>debug_zval_dump(<span class="vars">$b</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span><span class="func">echo</span><span>&nbsp;</span><span class="string">'$a='</span><span>.</span><span class="vars">$a</span><span>.</span><span class="string">"\t"</span><span>.</span><span class="string">'$b='</span><span>.</span><span class="vars">$b</span><span>.</span><span class="string">"\n"</span><span>;&nbsp;&nbsp;</span></span></li><li class="alt"><span>?&gt;&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_7_3911616" name="code" class="php" style="display: none;">&lt;?php
$a = 1;
function returnValue()
{
	global $a; 
	return $a;
}

echo "函数返回值，值方式调用函数\n";
$b = returnValue();
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
$b=2;
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
echo "函数返回值，引用方式调用函数\n";
$b = &amp;returnValue();
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
$b=2;
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";

$a = 1;
function &amp;returnRef()
{
	global $a; 
	return $a;
}

echo "函数返回引用，值方式调用函数\n";
$b = returnRef();
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
$b=2;
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
echo "函数返回引用，引用方式调用函数\n";
$b = &amp;returnRef();
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
$b=2;
debug_zval_dump($a);
debug_zval_dump($b);
echo '$a='.$a."\t".'$b='.$b."\n";
?&gt;</pre>
<p></p>
<p><span style="font-family:Arial,Verdana">执行结果如下</span></p>
<p><span style="font-family:Arial,Verdana"></span></p>
<div class="dp-highlighter bg_plain"><div class="bar"><div class="tools"><b>[plain]</b> <a href="#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;">view plain</a><span data-mod="popu_168"> <a href="#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;">copy</a><div style="position: absolute; left: 482px; top: 6231px; width: 23px; height: 12px; z-index: 99;"><embed id="ZeroClipboardMovie_8" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_8" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=8&amp;width=23&amp;height=12" wmode="transparent" width="23" align="middle" height="12"></div></span><span data-mod="popu_169"> <a href="#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;">print</a></span><a href="#" class="About" title="?" onclick="dp.sh.Toolbar.Command('About',this);return false;">?</a><span class="tracking-ad" data-mod="popu_167"><a href="https://code.csdn.net/snippets/77634" target="_blank" title="在CODE上查看代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片" style="position:relative;top:1px;left:2px;" width="12" height="12"></a></span><span class="tracking-ad" data-mod="popu_170"><a href="https://code.csdn.net/snippets/77634/fork" target="_blank" title="派生到我的代码片" style="text-indent:0;"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片" style="position:relative;top:2px;left:2px;" width="12" height="12"></a></span></div></div><ol start="1"><li class="alt"><span><span>函数返回值，值方式调用函数&nbsp;&nbsp;</span></span></li><li class=""><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class="alt"><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class=""><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=1&nbsp;&nbsp;</span></li><li class="alt"><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class=""><span>long(2)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class="alt"><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=2&nbsp;&nbsp;</span></li><li class=""><span>函数返回值，引用方式调用函数&nbsp;&nbsp;</span></li><li class="alt"><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class=""><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class="alt"><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=1&nbsp;&nbsp;</span></li><li class=""><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class="alt"><span>long(2)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class=""><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=2&nbsp;&nbsp;</span></li><li class="alt"><span>函数返回引用，值方式调用函数&nbsp;&nbsp;</span></li><li class=""><span>long(1)&nbsp;refcount(3)&nbsp;&nbsp;</span></li><li class="alt"><span>long(1)&nbsp;refcount(3)&nbsp;&nbsp;</span></li><li class=""><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=1&nbsp;&nbsp;</span></li><li class="alt"><span>long(1)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class=""><span>long(2)&nbsp;refcount(2)&nbsp;&nbsp;</span></li><li class="alt"><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=2&nbsp;&nbsp;</span></li><li class=""><span>函数返回引用，引用方式调用函数&nbsp;&nbsp;</span></li><li class="alt"><span>long(1)&nbsp;refcount(1)&nbsp;&nbsp;</span></li><li class=""><span>long(1)&nbsp;refcount(1)&nbsp;&nbsp;</span></li><li class="alt"><span>$a=1&nbsp;&nbsp;&nbsp;&nbsp;$b=1&nbsp;&nbsp;</span></li><li class=""><span>long(2)&nbsp;refcount(1)&nbsp;&nbsp;</span></li><li class="alt"><span>long(2)&nbsp;refcount(1)&nbsp;&nbsp;</span></li></ol><div class="save_code tracking-ad" data-mod="popu_249"><a href="javascript:;" target="_blank"><img src="http://static.blog.csdn.net/images/save_snippets.png"></a></div></div><pre code_snippet_id="77634" snippet_file_name="blog_20131122_8_2973524" name="code" class="plain" style="display: none;">函数返回值，值方式调用函数
long(1) refcount(2)
long(1) refcount(2)
$a=1    $b=1
long(1) refcount(2)
long(2) refcount(2)
$a=1    $b=2
函数返回值，引用方式调用函数
long(1) refcount(2)
long(1) refcount(2)
$a=1    $b=1
long(1) refcount(2)
long(2) refcount(2)
$a=1    $b=2
函数返回引用，值方式调用函数
long(1) refcount(3)
long(1) refcount(3)
$a=1    $b=1
long(1) refcount(2)
long(2) refcount(2)
$a=1    $b=2
函数返回引用，引用方式调用函数
long(1) refcount(1)
long(1) refcount(1)
$a=1    $b=1
long(2) refcount(1)
long(2) refcount(1)</pre>
<p></p>
<p><span style="font-family:Arial,Verdana">可以看到对于函数返回简单变类型的情况，只有函数返回的是引用，同时以引用方式调用函数时才能真正起到引用的效果。</span></p>
<p><span style="font-family:Arial,Verdana"><span style="color:#ff0000">那么为什么PHP要设计成<span style="font-family:Arial,Verdana">只有函数返回的是引用同时以引用方式调用函数时才能真正起到引用的效果，这不是很麻烦吗？一切都得从根源说起--变量存储结构。</span></span><br>
根据以上刺探结果分析绘制内存变化过程示意图如下:</span></p>
<p><span style="font-family:Arial,Verdana"><img src="http://img.blog.csdn.net/20131122154748093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VuemhvdTEyMTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>
</span></p>
<p><span style="font-family:Arial,Verdana">从图上看，当函数直接返回时会将要返回的变量内存结构复制一份成匿名结构体(注意此时引用计数refcount为0)，然后这里无论使用=还是=&amp;调用函数结果都是将$b指向这个结构体；<span style="font-family:Arial,Verdana">当函数引用返回时会将要返回的变量内存结构的指针，这时候使用=调用函数结果和直接赋值$a=$b一样，当使用=&amp;调用函数时和引用赋值<span style="font-family:Arial,Verdana">$a=&amp;$b表现一样。所以说，这里要弄清楚的是，<span style="color:#ff0000">函数返回方式决定了对要返回的变量的处理方式(复制内存还是直接返回内存指针)，函数调用方式决定了待赋值量和返回量的结合方式(指向同一内存结构还是绑定)。</span></span></span></span></p>
<p><br>
</p>
<p>好了，总结一下本博文最重要的两点：<span style="color:#ff0000">对象引用表现和普通变量一样，函数返回方式和调用方式在函数返回引用中各施其职</span>，弄懂这两点对你加深PHP的理解和写出更好的PHP程序相信都是有帮助的。</p>
<p><br>
</p>
<p>原创，转载请注明来自<a target="_blank" href="http://blog.csdn.net/wenzhou1219">http://blog.csdn.net/wenzhou1219</a><br>
</p>
   
</div>